- name: grab a list of users that can login with shells
  ansible.builtin.shell: 'grep -E "sh$|\/ch$|\/rc$|\/eshell$" /etc/passwd | cut -d : -f 1'
  register: users_result

- name: put users list into variable
  set_fact:
    users: "{{ users_result.stdout_lines }}"
    combined: {}

- name: generate passwords for each user
  ansible.builtin.set_fact:
    combined: "{{ combined | combine( { item: lookup('ansible.builtin.password', '/dev/null', length=16, chars=['ascii_letters', 'digits']) } ) }}"
  loop: "{{ users }}"
  loop_control:
    label: "{{ item }}"

- name: Change user passwords using sudo
  become: yes
  ansible.builtin.user:
    name: "{{ item.key }}"
    password: "{{ item.value | password_hash('sha512', lookup('ansible.builtin.password', '/dev/null', length=8, chars=['ascii_letters'])) }}"
  loop: "{{ combined | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: ansible_os_family | lower != 'alpine' and ansible_os_family | lower != 'freebsd' and ansible_os_family | lower != 'openbsd'

- name: Change user passwords using doas
  become: yes
  become_method: "doas"
  ansible.builtin.user:
    name: "{{ item.key }}"
    password: "{{ item.value | password_hash('sha512', lookup('ansible.builtin.password', '/dev/null', length=8, chars=['ascii_letters'])) }}"
  loop: "{{ combined | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: ansible_os_family | lower == 'alpine' or ansible_os_family | lower == 'freebsd' or ansible_os_family | lower == 'openbsd'

- name: Copy username and passwords to local file
  ansible.builtin.copy:
    content: "{% for key in combined %}{{ key }}, {{ combined[key] }}\n{% endfor %}"
    dest: "output/{{ inventory_hostname }}_passwords.txt"
  delegate_to: localhost
